#!/bin/bash

###
### Package build script
###
####
#### Usage: builder action
####
#### action is one of the following:
####  - download: Downloads the package to the cache
####  - build: Builds the package from the cache
####  - pack: Packages the compiled sources and places the archive in the right stage directory
####  - all: Executes in order: download, build, pack
####  - info: Prints package information
####  - check-latest: Checks for updates
####

EXEC_PATH="$(realpath -L -P $(dirname "$0"))"

source $EXEC_PATH/private/dirs.inc.sh
cd $BASE_DIR

##
## Download a file.
##
## Usage: download_file url filename
##
## url is the remote URL to download the file from
## filename is the local file name to download the file to
##
function download_file() {
  local url="$1"
  local fname="$2"

  if [[ ! -f "$fname" ]]; then
    echo "Downloading ${url}..."
    curl --connect-timeout 10 -L -# -o "$fname" "$url"

    if [[ $? -ne 0 ]]; then
      echo "ERROR: Unable to download file $url" >&2
      exit 1
    fi
  fi
}

##
## Sets a dependency.
## Dependencies are always built before the package that depends on it
## and only if have not yet been built.
##
function depends_on() {
  local dep_name="$1"

  echo "Building dependency ${dep_name}..."

  if package_built $dep_name; then
    echo "Dependency already present."
    return 0
  fi

  execute "$0" "$dep_name" all

  if [[ $? -ne 0 ]]; then
    echo "Error building ${dep_name}. Exiting..." >&2
    exit 1
  fi
}

##
## Checks if a package has already been built.
##
## Usage: package_built package-name
##
## Return value: true if the package has already been built, false if not
##
function package_built() {
  local dep_name="$1"

  test -n "$(sqlite3 $DB_PACKAGES "SELECT * FROM packages WHERE name = '$1';")"
}

##
## Exits if the required file does not exist.
##
## Usage: require filename
##
## filename is the file to check for existance
##
function require() {
  if [[ ! -f "$1" ]]; then
    echo "Required file $1 does not exist." >&2
    exit 1
  fi
}

##
## Extracts a tar archive to a directory.
##
## Usage: extract_tar tarfile destdir
##
function extract_tar() {
  local tarfile="$(realpath "$1")"
  local dest="$2"

  if [[ ! -d "$dest" ]]; then
    echo "$dest is not a valid directory" >&2
    exit 1
  fi

  pushd "$dest" >/dev/null
  
  echo "Extracting archive ${tarfile}..."
  execute tar -xf "$tarfile"

  popd >/dev/null
}

##
## Executes a command and checks its exit value is 0.
##
## Usage: execute command [arg [...]]
##
function execute() {
  [[ -n "$BUILDER_DEBUG" ]] && echo "$*"

  "$@"

  if [[ $? -ne 0 ]]; then
    echo "$1 returned $?"
    exit 1
  fi
}

function download() {
  download_file "$PACKAGE_URL" "$PACKAGE_PATH"
}

function build() {
  echo "ERROR: No build action defined!" >&2
  exit 1
}

##
## Checks if the package version of the build file is the latest version.
## The defatult implementation does nothing. This is intende to be substituted
## and implemented on a per-package basis.
##
## Usage: check_latest
##
## Return: 0 if the build file is up to date, 1 if there is a newer version available
##
function check_latest() {
  echo "Last version check not implemented for $PACKAGE_NAME" >&2

  exit 1
}

##
## Default check-latest implementation.
##
## Usage: package_check_latest DOWNLOAD_URL [SEARCH]
##
## Params:
##  DOWNLOAD_URL: The URL to check for updates
##  SEARCH: The regexp to match in the DOWNLOAD_URL (defaults to searching for PACKAGE_NAME-DOTTED_NUMERIC_VERSION.EXTENSION)
##
## Return: nothing. Exits with 0 if the package is up to date, with 2 if the package is outdated
##
## NOTE: Current limitations: package extension must contains two dots (i.e.: .tar.gz)
##
function package_check_latest() {
  local DOWNLOAD_URL="$1"
  local SEARCH="$2"
  local curl_opts="--connect-timeout 10 -s"

  [[ -z "$SEARCH" ]] && SEARCH="$PACKAGE-[0-9.]+$(echo $CACHE_EXTENSION | sed 's/\./\\./g')"

  if [[ "${DOWNLOAD_URL:0:6}" == 'ftp://' ]]; then
    curl_opts+=" -l"
  else # Assume HTTP(S)
    curl_opts+=" -L"
  fi
  
  local ver=$(curl $curl_opts "$DOWNLOAD_URL" | grep -oE "$SEARCH" | sed "s|$PACKAGE|$(echo $PACKAGE | tr - _)|" | cut -d - -f 1 --complement | rev | cut -d . -f 1,2 --complement | rev | sort -Vu | tail -n 1)

  if [[ "$ver" == "$PACKAGE_VERSION" ]]; then
    echo Package up to date
    exit 0
  else
    echo "New version $ver detected"
    exit 2
  fi
}

function pack() {
  register_build
  execute "$SCRIPTS_DIR/private/pack" "$STAGE" "$PACKAGE_NAME"
  execute "$SCRIPTS_DIR/private/toenv" "$STAGE" "$PACKAGE_NAME"
  [[ "$LIBRARY" = yes ]] && execute ldconfig -r "${ENV_DIR}" -n /{lib,lib64} /usr/{lib,lib64} /usr/local/{lib,lib64} 2>/dev/null
}

##
## Registers the package build
##
## Usage: register_build
##
function register_build() {
  sqlite3 $DB_PACKAGES "INSERT INTO packages(name, version, file) VALUES('$PACKAGE', '$PACKAGE_VERSION', '$STAGES_DIR/stage$STAGE/${PACKAGE_NAME}.tar.xz');"
}

##
## Strips unneeded information from package executables.
##
## Usage: strip_package
##
function strip_package() {
  echo "Stripping package..."

  # Program and shared objects
  for f in $(find $INSTALL_DIR/{bin,sbin,usr/bin,usr/sbin,usr/local/bin,usr/local/sbin,lib,lib64,usr/lib,usr/lib64,usr/local/lib,usr/local/lib64} -type f -executable 2>/dev/null); do
    strip --strip-unneeded "$f" 2>/dev/null
  done

  # Static libraries
  for f in $(find $INSTALLDIR/{lib,lib64,usr/lib,usr/lib64,usr/local/lib,usr/local/lib64} -type -f -executable -name '*.a' 2>/dev/null); do
    strip -g "$f" 2>/dev/null
  done
}

function info() {
  echo -e "$PACKAGE_NAME: $PACKAGE_DESCRIPTION\n\t$PROJECT_URL\n"
}

# Check cache directory
[[ ! -d "$CACHE_DIR" ]] && execute mkdir -p "$CACHE_DIR"

# Clean output directory
[[ ! -d "$INSTALL_DIR" ]] && execute mkdir -p "$INSTALL_DIR"

# Checks environment directory
[[ ! -d "$ENV_DIR" ]] && execute mkdir -p "$ENV_DIR"

# Checks stage directory
for dir in $STAGES_DIR/stage{1,2,3,P}; do [[ ! -d "$dir" ]] && mkdir -p "$dir"; done

# Detect number of CPUS
N_CPUS="$((egrep '^processor' < /proc/cpuinfo ) | wc -l)"

# Cache file default extension
CACHE_EXTENSION=".tar.xz"

# Get package
PACKAGE="$1"; shift

# Include build file
[[ -z "$1" ]] && echo "ERROR: No build file" >&2 && exit 1
BUILD_FILE=$(find $BUILDS_DIR -name "*.${PACKAGE}.build")
[[ ! -f "$BUILD_FILE" ]] && echo "ERROR: Build file does not exist" >&2 && exit 1
source "$BUILD_FILE"

# Compute package data
PACKAGE_FILENAME="${PACKAGE_NAME}${CACHE_EXTENSION}"
STAGE=$(basename "$BUILD_FILE" | cut -d . -f 1)

# Download location of the main package source code
PACKAGE_PATH="${CACHE_DIR}/$PACKAGE_FILENAME"

# Enable fast-build feature, if needed
[[ "$BUILD_FAST" = yes ]] && BUILD_DIR=/tmp/build

# Create build directory
[[ ! -d "$BUILD_DIR" ]] && execute mkdir -p "$BUILD_DIR"

# Check if package has already been built and exit if it has been
[[ "$1" =~ build|download|all ]] && package_built "$PACKAGE" && echo "$PACKAGE already built" >&2 && exit 0

[[ -z "$1" ]] && echo "ERROR: No action" >&2 && exit 1

# Include settings file (if any)
SETTINGS_FILE="$BASE_DIR/settings.conf.sh"
[[ "$1" =~ build|all ]] && [[ -f "$SETTINGS_FILE" ]] && source "$SETTINGS_FILE"

##
## Proxy build function
##
## Usage: build_proxy
##
function build_proxy() {
  if [[ "$PACKAGE" != "linux" ]]; then
    depends_on linux

  # Detect latest kernel directory
  KERNEL_DIR="$(realpath $(find -maxdepth 1 -name 'linux*' -type d | sort -f | tail -n 1) 2>/dev/null)"
  [[ -z "$KERNEL_DIR" ]] && [[ ! "$1" =~ linux* ]] && echo "No kernel directory found in $(realpath .)" && exit 1

    if [[ "$PACKAGE" != "glibc" ]]; then
      depends_on glibc
    fi
  fi

  execute rm -rf $BUILD_DIR/*
  execute rm -rf $INSTALL_DIR/*
  build
}

##
## Proxy pack function
##
## Usage: pack_proxy
##
function pack_proxy() {
  pack
  execute rm -rf $BUILD_DIR/*
}

# Execute action
case "$1" in
  download)
    download ;;
  build)
    build_proxy ;;
  pack)
    pack_proxy ;;
  info)
    info ;;
  all)
    download; build_proxy; pack_proxy ;;
  check-latest)
    check_latest ;;
  *)
    echo "ERROR: invalid action" >&2
    exit 1
    ;;
esac

true
