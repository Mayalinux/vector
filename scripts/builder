#!/bin/bash

###
### Package build script
###
####
#### Usage: builder action
####
#### action is one of the following:
####  - download: Downloads the package to the cache
####  - build: Builds the package from the cache
####  - pack: Packages the compiled sources and places the archive in the right stage directory
####  - all: Executes in order: download, build, pack
####  - info: Prints package information
####

EXEC_PATH="$(realpath $(dirname "$0"))"

source scripts/dirs.inc.sh

##
## Download a file.
##
## Usage: download_file url filename
##
## url is the remote URL to download the file from
## filename is the local file name to download the file to
##
function download_file() {
  local url="$1"
  local fname="$2"

  if [[ ! -f "$fname" ]]; then
    echo "Downloading ${url}..."
    curl -L -# -o "$fname" "$url"

    if [[ $? -ne 0 ]]; then
      echo "ERROR: Unable to download file $url" >&2
      exit 1
    fi
  fi
}

##
## Sets a dependency.
## Dependencies are always built before the package that depends on it
## and only if have not yet been built.
##
function depends_on() {
  local dep_name="$1"
  local dep_file="${dep_name}.tar.xz"

  echo "Building dependency ${dep_name}..."

  if package_built $dep_name; then
    echo "Dependency already present."
    return 0
  fi

  execute "$0" "$dep_name" all

  if [[ $? -ne 0 ]]; then
    echo "Error building ${dep_name}. Exiting..." >&2
    exit 1
  fi
}

##
## Checks if a package has already been built.
##
## Usage: package_built package-name
##
## Return value: true if the package has already been built, false if not
##
function package_built() {
  local dep_name="$1"
  local dep_file="${dep_name}.tar.xz"

  test -f "$PKG_DIR/stage$STAGE/$dep_file"
}

##
## Exits if the required file does not exist.
##
## Usage: require filename
##
## filename is the file to check for existance
##
function require() {
  if [[ ! -f "$1" ]]; then
    echo "Required file $1 does not exist." >&2
    exit 1
  fi
}

##
## Extracts a tar archive to a directory.
##
## Usage: extract_tar tarfile destdir
##
function extract_tar() {
  local tarfile="$(realpath "$1")"
  local dest="$2"

  if [[ ! -d "$dest" ]]; then
    echo "$dest is not a valid directory" >&2
    exit 1
  fi

  pushd "$dest" >/dev/null
  
  echo "Extracting archive ${tarfile}..."
  execute tar -xf "$tarfile"

  popd >/dev/null
}

##
## Executes a command and checks its exits 0.
##
## Usage: execute command [arg [...]]
##
function execute() {
  [[ -n "$DEBUG" ]] && echo "$*"

  $*

  if [[ $? -ne 0 ]]; then
    echo "$1 returned $?"
    exit 1
  fi
}

function download() {
  download_file "$PACKAGE_URL" "$PACKAGE_PATH"
}

function build() {
  require "$PACKAGE_PATH"

  echo "ERROR: No build action defined!" >&2
  exit 1
}

function pack() {
  execute "$EXEC_PATH/pack" "$STAGE" "$PACKAGE_NAME"
  execute "$EXEC_PATH/toenv" "$STAGE" "$PACKAGE_NAME"
  [[ "$LIBRARY" = yes ]] && execute ldconfig -r "${ENV_DIR}"
}

function info() {
  echo -e "$PACKAGE_NAME: $PACKAGE_DESCRIPTION\n\t$PROJECT_URL\n"
}

# Check cache directory
[[ ! -d "$CACHE_DIR" ]] && execute mkdir -p "$CACHE_DIR"

# Clean output directory
[[ ! -d "$BLD_DIR" ]] && execute mkdir -p "$BLD_DIR"

# Checks environment directory
[[ ! -d "$ENV_DIR" ]] && execute mkdir -p "$ENV_DIR"

# Checks stage directory
for dir in $PKG_DIR/stage{1,2,3,P}; do [[ ! -d "$dir" ]] && mkdir -p "$dir"; done

# Detect kernel directory
KERNEL_DIR="$(find -maxdepth 1 -name 'linux*' -type d | sort -f | tail -n 1)"
[[ -z "$KERNEL_DIR" ]] && [[ ! "$1" =~ linux* ]] && echo "No kernel directory found in $(realpath .)" && exit 1

# Detect number of CPUS
N_CPUS="$((egrep '^processor' < /proc/cpuinfo ) | wc -l)"

# Cache file default extension
CACHE_EXTENSION=".tar.xz"

# Include build file
BUILD_FILE=$(find $BUILDS_DIR -name "*.${1}.build"); shift
source "$BUILD_FILE"

# Compute package data
PACKAGE_FILENAME="${PACKAGE_NAME}${CACHE_EXTENSION}"
STAGE=$(basename "$BUILD_FILE" | cut -d . -f 1)

# Download location of the main package source code
PACKAGE_PATH="${CACHE_DIR}/$PACKAGE_FILENAME"

# Enable fast-build feature, if needed
[[ "$BUILD_FAST" = yes ]] && BUILD_DIR=/tmp/build

# Create build directory
[[ ! -d "$BUILD_DIR" ]] && execute mkdir -p "$BUILD_DIR"

# Check if package has already been built and exit if it has been
package_built "$PACKAGE_NAME" && exit 0

# Execute action
case "$1" in
  download)
    download ;;
  build)
    execute rm -rf $BUILD_DIR/*
    execute rm -rf $BLD_DIR/*
    build ;;
  pack)
    pack ;;
  info)
    info ;;
  all)
    execute rm -rf $BUILD_DIR/*
    execute rm -rf $BLD_DIR/*
    download; build; pack ;;
  * | "")
    echo "WARNING: no action defined" >&2
    exit 1
    ;;
esac

true
