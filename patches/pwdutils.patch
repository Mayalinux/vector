*** lib/read-files.c	2014-02-19 14:25:50.478000923 +0100
--- lib/read-files.c	2014-02-19 15:09:30.176028235 +0100
***************
*** 33,39 ****
  #include <fcntl.h>
  #include <nss.h>
  #include <bits/libc-lock.h>
! #define __libc_lock_t pthread_mutex_t
  
  #include "read-files.h"
  
--- 33,39 ----
  #include <fcntl.h>
  #include <nss.h>
  #include <bits/libc-lock.h>
! #include <pthread.h>
  
  #include "read-files.h"
  
***************
*** 176,186 ****
  		  char *buffer, size_t buflen, int *errnop)
  {
    /* Locks the static variables in this file.  */
!   __libc_lock_define_initialized (static, lock)
    enum nss_status status;
    FILE *stream = NULL;
  
!   __libc_lock_lock (lock);
  
    status = internal_setent (&stream, "/shadow");
    if (status == NSS_STATUS_SUCCESS)
--- 176,186 ----
  		  char *buffer, size_t buflen, int *errnop)
  {
    /* Locks the static variables in this file.  */
!   static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
    enum nss_status status;
    FILE *stream = NULL;
  
!   pthread_mutex_lock(&lock);
  
    status = internal_setent (&stream, "/shadow");
    if (status == NSS_STATUS_SUCCESS)
***************
*** 196,202 ****
        internal_endent (&stream);
      }
  
!   __libc_lock_unlock (lock);
  
    return status;
  }
--- 196,202 ----
        internal_endent (&stream);
      }
  
!   pthread_mutex_unlock(&lock);
  
    return status;
  }
***************
*** 206,216 ****
  		  char *buffer, size_t buflen, int *errnop)
  {
    /* Locks the static variables in this file.  */
!   __libc_lock_define_initialized (static, lock)
    enum nss_status status;
    FILE *stream = NULL;
  
!   __libc_lock_lock (lock);
  
    status = internal_setent (&stream, "/passwd");
    if (status == NSS_STATUS_SUCCESS)
--- 206,216 ----
  		  char *buffer, size_t buflen, int *errnop)
  {
    /* Locks the static variables in this file.  */
!   static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
    enum nss_status status;
    FILE *stream = NULL;
  
!   pthread_mutex_lock(&lock);
  
    status = internal_setent (&stream, "/passwd");
    if (status == NSS_STATUS_SUCCESS)
***************
*** 226,232 ****
        internal_endent (&stream);
      }
  
!   __libc_lock_unlock (lock);
  
    return status;
  }
--- 226,232 ----
        internal_endent (&stream);
      }
  
!   pthread_mutex_unlock(&lock);
  
    return status;
  }
***************
*** 236,246 ****
  		  size_t buflen, int *errnop)
  {
    /* Locks the static variables in this file.  */
!   __libc_lock_define_initialized (static, lock)
    enum nss_status status;
    FILE *stream = NULL;
  
!   __libc_lock_lock (lock);
  
    status = internal_setent (&stream, "/passwd");
    if (status == NSS_STATUS_SUCCESS)
--- 236,246 ----
  		  size_t buflen, int *errnop)
  {
    /* Locks the static variables in this file.  */
!   static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
    enum nss_status status;
    FILE *stream = NULL;
  
!   pthread_mutex_lock(&lock);
  
    status = internal_setent (&stream, "/passwd");
    if (status == NSS_STATUS_SUCCESS)
***************
*** 256,262 ****
        internal_endent (&stream);
      }
  
!   __libc_lock_unlock (lock);
  
    return status;
  }
--- 256,262 ----
        internal_endent (&stream);
      }
  
!   pthread_mutex_unlock(&lock);
  
    return status;
  }
***************
*** 267,280 ****
  		  size_t buflen, int *errnop)
  {
    /* Some static variables */
!   __libc_lock_define_initialized (static, lock)
    static FILE *stream;
    static fpos_t position;
  
    /* Return next entry in host file.  */
    enum nss_status status = NSS_STATUS_SUCCESS;
  
!   __libc_lock_lock (lock);
  
    /* Be prepared that the set*ent function was not called before.  */
    if (stream == NULL)
--- 267,280 ----
  		  size_t buflen, int *errnop)
  {
    /* Some static variables */
!   static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
    static FILE *stream;
    static fpos_t position;
  
    /* Return next entry in host file.  */
    enum nss_status status = NSS_STATUS_SUCCESS;
  
!   pthread_mutex_lock(&lock);
  
    /* Be prepared that the set*ent function was not called before.  */
    if (stream == NULL)
***************
*** 316,322 ****
          }
      }
  
!   __libc_lock_unlock (lock);
  
    return status;
  }
--- 316,322 ----
          }
      }
  
!   pthread_mutex_unlock(&lock);
  
    return status;
  }
***************
*** 327,340 ****
  		  size_t buflen, int *errnop)
  {
    /* Some static variables */
!   __libc_lock_define_initialized (static, lock)
    static FILE *stream;
    static fpos_t position;
  
    /* Return next entry in host file.  */
    enum nss_status status = NSS_STATUS_SUCCESS;
  
!   __libc_lock_lock (lock);
  
    /* Be prepared that the set*ent function was not called before.  */
    if (stream == NULL)
--- 327,340 ----
  		  size_t buflen, int *errnop)
  {
    /* Some static variables */
!   static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
    static FILE *stream;
    static fpos_t position;
  
    /* Return next entry in host file.  */
    enum nss_status status = NSS_STATUS_SUCCESS;
  
!   pthread_mutex_lock(&lock);
  
    /* Be prepared that the set*ent function was not called before.  */
    if (stream == NULL)
***************
*** 376,382 ****
          }
      }
  
!   __libc_lock_unlock (lock);
  
    return status;
  }
--- 376,382 ----
          }
      }
  
!   pthread_mutex_unlock(&lock);
  
    return status;
  }
*** lib/read-files-group.c	2014-02-19 14:26:00.220001024 +0100
--- lib/read-files-group.c	2014-02-19 15:10:35.482028916 +0100
***************
*** 35,41 ****
  #include <fcntl.h>
  #include <nss.h>
  #include <bits/libc-lock.h>
! #define __libc_lock_t pthread_mutex_t
  
  #include "read-files.h"
  
--- 35,41 ----
  #include <fcntl.h>
  #include <nss.h>
  #include <bits/libc-lock.h>
! #include <pthread.h>
  
  #include "read-files.h"
  
***************
*** 140,150 ****
  		  char *buffer, size_t buflen, int *errnop)
  {
    /* Locks the static variables in this file.  */
!   __libc_lock_define_initialized (static, lock)
    enum nss_status status;
    FILE *stream = NULL;
  
!   __libc_lock_lock (lock);
  
    status = internal_setent (&stream, "/group");
    if (status == NSS_STATUS_SUCCESS)
--- 140,150 ----
  		  char *buffer, size_t buflen, int *errnop)
  {
    /* Locks the static variables in this file.  */
!   static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
    enum nss_status status;
    FILE *stream = NULL;
  
!   pthread_mutex_lock(&lock);
  
    status = internal_setent (&stream, "/group");
    if (status == NSS_STATUS_SUCCESS)
***************
*** 160,166 ****
        internal_endent (&stream);
      }
  
!   __libc_lock_unlock (lock);
  
    return status;
  }
--- 160,166 ----
        internal_endent (&stream);
      }
  
!   pthread_mutex_unlock(&lock);
  
    return status;
  }
***************
*** 170,180 ****
  		  size_t buflen, int *errnop)
  {
    /* Locks the static variables in this file.  */
!   __libc_lock_define_initialized (static, lock)
    enum nss_status status;
    FILE *stream = NULL;
  
!   __libc_lock_lock (lock);
  
    status = internal_setent (&stream, "/group");
    if (status == NSS_STATUS_SUCCESS)
--- 170,180 ----
  		  size_t buflen, int *errnop)
  {
    /* Locks the static variables in this file.  */
!   static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
    enum nss_status status;
    FILE *stream = NULL;
  
!   pthread_mutex_lock(&lock);
  
    status = internal_setent (&stream, "/group");
    if (status == NSS_STATUS_SUCCESS)
***************
*** 190,201 ****
        internal_endent (&stream);
      }
  
!   __libc_lock_unlock (lock);
  
    return status;
  }
  
! __libc_lock_define_initialized (static, lock);
  static FILE *stream;
  static fpos_t position;
  
--- 190,201 ----
        internal_endent (&stream);
      }
  
!   pthread_mutex_unlock(&lock);
  
    return status;
  }
  
! static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;;
  static FILE *stream;
  static fpos_t position;
  
***************
*** 207,213 ****
    /* Return next entry in host file.  */
    enum nss_status status = NSS_STATUS_SUCCESS;
  
!   __libc_lock_lock (lock);
  
    /* Be prepared that the set*ent function was not called before.  */
    if (stream == NULL)
--- 207,213 ----
    /* Return next entry in host file.  */
    enum nss_status status = NSS_STATUS_SUCCESS;
  
!   pthread_mutex_lock(&lock);
  
    /* Be prepared that the set*ent function was not called before.  */
    if (stream == NULL)
***************
*** 249,255 ****
          }
      }
  
!   __libc_lock_unlock (lock);
  
    return status;
  }
--- 249,255 ----
          }
      }
  
!   pthread_mutex_unlock(&lock);
  
    return status;
  }
*** configure.in	2005-08-17 17:20:52.000000000 +0200
--- configure.in	2014-02-19 15:20:45.632834150 +0100
***************
*** 42,48 ****
  EXTRA_CFLAGS=""
  if eval "test x$GCC = xyes"; then
    for flag in \
! -W -Wall -Wbad-function-cast -Wcast-align -Wcast-qual -Winline -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wshadow -Wstrict-prototypes -Wundef -Werror -Wpointer-arith
    do
      JAPHAR_GREP_CFLAGS($flag, [ EXTRA_CFLAGS="$EXTRA_CFLAGS $flag" ])
    done
--- 42,48 ----
  EXTRA_CFLAGS=""
  if eval "test x$GCC = xyes"; then
    for flag in \
! -W -Wall -Wbad-function-cast -Wcast-align -Wcast-qual -Winline -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wshadow -Wstrict-prototypes -Wundef -Wpointer-arith
    do
      JAPHAR_GREP_CFLAGS($flag, [ EXTRA_CFLAGS="$EXTRA_CFLAGS $flag" ])
    done
*** src/usermod.c	2005-08-16 13:53:36.000000000 +0200
--- src/usermod.c	2014-02-19 15:23:22.947119512 +0100
***************
*** 33,38 ****
--- 33,39 ----
  #include <signal.h>
  #include <libgen.h>
  #include <sys/resource.h>
+ #include <sys/stat.h>
  #ifdef HAVE_LIBNSCD_H
  #include <libnscd.h>
  #endif
