PACKAGE_VERSION="4.3"
PACKAGE_NAME="bash-$PACKAGE_VERSION"
PACKAGE_DESCRIPTION="Bourn Again Shell"
PROJECT_URL="http://www.gnu.org/software/bash/"
CACHE_EXTENSION=".tar.gz"
UPDATE_URL="ftp://ftp.cwru.edu/pub/bash/"
PACKAGE_URL="ftp://ftp.gnu.org/gnu/bash/${PACKAGE_NAME}${CACHE_EXTENSION}"
LIBRARY=no

function download() {
  download_file "$PACKAGE_URL" "$PACKAGE_PATH"

  echo "Downloading patches..."

  [[ ! -d "$CACHE_DIR/patches/$PACKAGE_NAME" ]] && execute mkdir -p "$CACHE_DIR/patches/$PACKAGE_NAME"

  pushd "$CACHE_DIR/patches/$PACKAGE_NAME" >/dev/null
  local pfiles

  for pfile in $(curl -s -l ftp://ftp.gnu.org/gnu/bash/${PACKAGE_NAME}-patches/ | grep -v '.sig$'); do
    [[ ! -f "$pfile" ]] && pfiles+=",$pfile"
  done
  [[ -n "$pfiles" ]] && execute curl -# -O "ftp://ftp.gnu.org/gnu/bash/${PACKAGE_NAME}-patches/{$(echo "$pfiles" | cut -d , -f 1 --complement)}"
  popd >/dev/null
}

function build() {
  depends_on readline
  depends_on ncurses

  require "$PACKAGE_PATH"

  extract_tar "$PACKAGE_PATH" "$BUILD_DIR"

  pushd "$BUILD_DIR" >/dev/null
  for pfile in $CACHE_DIR/patches/$PACKAGE_NAME/*; do
    echo "Applying patch ${pfile}..."
    sed \
      -e "s:\.\./${PACKAGE_NAME}\.*[0-9]*/:$PACKAGE_NAME/:g" \
      -e "s:\.\./${PACKAGE_NAME}\.*[0-9]*-patched/:$PACKAGE_NAME/:g" \
      "$pfile" | patch -p0

    if [[ $? -ne 0 ]]; then
      echo "ERROR: Unable to apply patch $pfile" >&2
      exit 1
    fi
  done
  popd >/dev/null

  local BDIR="$BUILD_DIR/build"
  execute mkdir -p "$BDIR"

  pushd "$BDIR" >/dev/null
  ../$PACKAGE_NAME/configure CFLAGS="-I$ENV_DIR/usr/include" --prefix=/usr --bindir=/bin --sbindir=/sbin --libdir=/lib --sysconfdir=/etc --localstatedir=/var --enable-alias --enable-arith-for-command --enable-array-variables --enable-brace-expansion --enable-casemod-attributes --enable-casemod-expansions --enable-command-timing --enable-cond-command --enable-cond-regexp --enable-coprocesses --enable-debugger --enable-directory-stack --enable-dparen-arithmetic --enable-extended-glob --enable-help-builtin --enable-history --enable-job-control --enable-multibyte --enable-net-redirections --enable-process-substitution --enable-progcomp --enable-readline --enable-select --enable-separate-helpfiles --without-gnu-malloc --disable-rpath
  assert_last
  execute make -j$(($N_CPUS+1))
  execute make DESTDIR="$INSTALL_DIR" install
  popd >/dev/null

  pushd "$INSTALL_DIR/bin" >/dev/null
  execute ln -s bash sh
  popd >/dev/null
  strip_package
}

function check_latest() {
  local ver=$(curl -s --connect-timeout 10 "$UPDATE_URL/" | awk '/bash/ { sub("bash", "", $9); print $9; } // {}' | grep '.*\.tar\.gz$' | grep -v doc | sed -e "s/\.tar\.gz$//" -e "s/^-//" | sort -V | tail -n 1)

  if [[ "$ver" == "$PACKAGE_VERSION" ]]; then
    echo "Package up to date"
    exit 0
  else
    echo "Newer version $ver detected"
    exit 2
  fi
}
