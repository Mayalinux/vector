PACKAGE_VERSION="3.17"
PACKAGE_NAME="linux-$PACKAGE_VERSION"
PACKAGE_DESCRIPTION="Linux kernel"
PROJECT_URL="https://www.kernel.org"
PACKAGE_URL="https://www.kernel.org/pub/linux/kernel/v3.x/${PACKAGE_NAME}.tar.xz"
LIBRARY=no

function build() {
  require "$PACKAGE_PATH"

  extract_tar "$PACKAGE_PATH" "$(dirname "$0")/.."

  local KDIR="./$PACKAGE_NAME"

  execute cp "$OTHER_DIR/linux-config" "$KDIR/.config"
  execute touch "$KDIR/cpio-mayal.txt"

  execute make -C "$KDIR" -j$(($N_CPUS+1)) all
  execute make -C "$KDIR" INSTALL_MOD_PATH="$INSTALL_DIR" modules_install
  execute make -C "$KDIR" headers_install

  local kimg="$KDIR/arch/x86/boot/bzImage"
  local vmlinuz="vmlinuz-$(echo "$PACKAGE_NAME" | cut -d - -f 2)-mayal"

  execute mkdir -p "$INSTALL_DIR/boot"
  execute cp "$kimg" "$INSTALL_DIR/boot/$vmlinuz"
  execute cp "$KDIR/System.map" "$INSTALL_DIR/boot/"

  pushd "$INSTALL_DIR/boot" >/dev/null
  execute ln -s "$vmlinuz" vmlinuz
  popd >/dev/null
}

function check_latest() {
  python3 <<EOF
import sys
from html.parser import HTMLParser
from urllib.request import urlopen

class KernelPageParser(HTMLParser):
  def __init__(self):
    super().__init__()
    self.data = False

  def handle_starttag(self, tag, attrs):
    if tag == 'td':
      for name, value in attrs:
        if name == 'id' and value == 'latest_link':
          self.data = True

  def handle_data(self, data):
    if self.data == True:
      ver = data.strip(' \t\n')
      if len(ver) > 0:
        if ver == '${PACKAGE_VERSION}':
          print('Package up to date')
          sys.exit(0)
        else:
          print('Newer version %s detected' % ver, file=sys.stderr)
          sys.exit(2)

KernelPageParser().feed(urlopen('https://www.kernel.org').read().decode('utf-8'))
print('Unknown error', file=sys.stderr)
sys.exit(1)
EOF
}
