PACKAGE_VERSION="3.17.1"
PACKAGE_NAME="linux-$PACKAGE_VERSION"
PACKAGE_DESCRIPTION="Linux kernel"
PROJECT_URL="https://www.kernel.org"
PACKAGE_URL="https://www.kernel.org/pub/linux/kernel/v$(echo $PACKAGE_VERSION | cut -d . -f 1).x/${PACKAGE_NAME}.tar.xz"
LIBRARY=no

function build() {
  require "$PACKAGE_PATH"

  extract_tar "$PACKAGE_PATH" "$(dirname "$0")/.."

  local KDIR="$BASE_DIR/$PACKAGE_NAME"

  execute cp "$OTHER_DIR/linux-config" "$KDIR/.config"
  execute touch "$KDIR/cpio-mayal.txt"

  # Always download the latest wireless-regdb version
  echo "Downloading and applying latest wireless regulatory database..."
  local WIRELESS_REGDB_VERSION=$(curl --connect-timeout 10 -sl ftp://kernel.org/pub/software/network/wireless-regdb/ | grep -E '\.tar\.xz$' | cut -d - -f 1,2 --complement | rev | cut -d . -f 1,2 --complement | rev | sort -Vu | tail -n 1)

  execute curl -sL https://www.kernel.org/pub/software/network/wireless-regdb/wireless-regdb-${WIRELESS_REGDB_VERSION}.tar.xz | execute xz --decompress --stdout | execute tar -xO wireless-regdb-$WIRELESS_REGDB_VERSION/db.txt >"$KDIR/net/wireless/db.txt"

  execute make -C "$KDIR" -j$(($N_CPUS+1)) all
  execute make -C "$KDIR" INSTALL_MOD_PATH="$INSTALL_DIR" modules_install
  execute make -C "$KDIR" headers_install

  local kimg="$KDIR/arch/x86/boot/bzImage"
  local vmlinuz="vmlinuz-$(echo "$PACKAGE_NAME" | cut -d - -f 2)-mayal"

  execute mkdir -p "$INSTALL_DIR/boot"
  execute cp "$kimg" "$INSTALL_DIR/boot/$vmlinuz"
  execute cp "$KDIR/System.map" "$INSTALL_DIR/boot/"

  pushd "$INSTALL_DIR/boot" >/dev/null
  execute ln -s "$vmlinuz" vmlinuz
  popd >/dev/null

  execute mkdir -p $INSTALL_DIR/usr/include
  execute cp -R $KDIR/usr/include/* $INSTALL_DIR/usr/include/
}

function check_latest() {
  local ver=$(curl --connect-timeout 10 -sL $PROJECT_URL | grep -oE "$PACKAGE-[0-9.]+$(echo $CACHE_EXTENSION | sed 's/\./\\./g')" | cut -d - -f 1 --complement | rev | cut -d . -f 1,2 --complement | rev | sort -Vu | tail -n 1)

  if [[ "$ver" == "$PACKAGE_VERSION" ]]; then
    echo Package up to date
    exit 0
  else
    echo "New version $ver detected"
    exit 2
  fi
}
