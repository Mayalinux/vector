PACKAGE_VERSION="2.25.1"
PACKAGE_NAME="util-linux-${PACKAGE_VERSION}"
PACKAGE_DESCRIPTION="Linux kernel utilities"
PROJECT_URL="ftp://www.kernel.org/pub/linux/utils/util-linux/"
PACKAGE_URL="ftp://www.kernel.org/pub/linux/utils/util-linux/v2.25/${PACKAGE_NAME}.tar.xz"
BUILD_FAST=yes
LIBRARY=yes

function build() {
  depends_on ncurses
  depends_on zlib
  depends_on libcap
  depends_on acl

  require "$PACKAGE_PATH"

  extract_tar "$PACKAGE_PATH" "$BUILD_DIR"

  local BDIR="$BUILD_DIR/build"
  execute mkdir -p "$BDIR"

  pushd "$BDIR" >/dev/null
  sed -i -e "s:\([^A-Za-z0-9]\)/lib:\1$ENV/lib:g" ../$PACKAGE_NAME/configure
  execute ../$PACKAGE_NAME/configure CFLAGS="$CFLAGS" --prefix=/usr --sysconfdir=/etc --disable-rpath --bindir=/bin --sbindir=/sbin --libdir=/lib --localstatedir=/var --with-ncurses --without-slang --without-user --without-smack --without-python --without-udev --with-sysroot="$ENV" --disable-makeinstall-{chown,setuid} --without-systemd
  execute make -j$(($N_CPUS+1))
  execute make DESTDIR="$INSTALL_DIR" install
  strip_package
}

function check_latest() {
  local ver=$(curl -s "$PROJECT_URL/" | tail -n 1 | awk '// { print $9; }')
  ver=${ver:1}

  if [[ "$ver" == $(echo $PACKAGE_VERSION | cut -d . -f 3 --complement) ]]; then
    local nver="$PACKAGE_VERSION"
    [[ -n $(echo "$nver" | cut -d . -f 3) ]] && nver=$(echo "$nver" | cut -d . -f 3 --complement)
    ver=$(curl -s "$PROJECT_URL/v$nver/" | awk '// { print $9; }' | grep 'util-linux.*\.tar\.xz' | grep -v -e "-rc[0-9]\+" | sed -e 's/util-linux-//' -e 's/\.tar\.xz//' | cut -d . -f 3 -s | grep -v '^$' | sort -g | tail -n 1)

    if [[ $ver != $(echo "$PACKAGE_VERSION" | cut -d . -f 3) ]]; then
      echo "Newer version detected"
      exit 2
    else
      echo "Package up to date"
      exit 0
    fi
  else
    echo "Newer version $ver detected"
    exit 2
  fi
}
